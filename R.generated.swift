//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var reuseIdentifier: reuseIdentifier { .init() }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `BackgroundColor`.
    var backgroundColor: RswiftResources.ColorResource { .init(name: "BackgroundColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 14 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `icFavourite`.
    var icFavourite: RswiftResources.ImageResource { .init(name: "icFavourite", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icFavouriteSeleted`.
    var icFavouriteSeleted: RswiftResources.ImageResource { .init(name: "icFavouriteSeleted", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconAddNew`.
    var iconAddNew: RswiftResources.ImageResource { .init(name: "iconAddNew", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconBarHome`.
    var iconBarHome: RswiftResources.ImageResource { .init(name: "iconBarHome", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconBarHomeSelected`.
    var iconBarHomeSelected: RswiftResources.ImageResource { .init(name: "iconBarHomeSelected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconBarSetting`.
    var iconBarSetting: RswiftResources.ImageResource { .init(name: "iconBarSetting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconBarSettingSelected`.
    var iconBarSettingSelected: RswiftResources.ImageResource { .init(name: "iconBarSettingSelected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconLikeUs`.
    var iconLikeUs: RswiftResources.ImageResource { .init(name: "iconLikeUs", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconMenuGroup`.
    var iconMenuGroup: RswiftResources.ImageResource { .init(name: "iconMenuGroup", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconPrivacy`.
    var iconPrivacy: RswiftResources.ImageResource { .init(name: "iconPrivacy", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconRename`.
    var iconRename: RswiftResources.ImageResource { .init(name: "iconRename", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconSendMail`.
    var iconSendMail: RswiftResources.ImageResource { .init(name: "iconSendMail", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconSettingShare`.
    var iconSettingShare: RswiftResources.ImageResource { .init(name: "iconSettingShare", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconShare`.
    var iconShare: RswiftResources.ImageResource { .init(name: "iconShare", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
    }
  }

  /// This `_R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `SettingCells`.
    var settingCells: RswiftResources.NibReferenceReuseIdentifier<SettingCells, SettingCells> { .init(name: "SettingCells", bundle: bundle, identifier: "SettingCells") }

    /// Nib `ViewCell`.
    var viewCell: RswiftResources.NibReferenceReuseIdentifier<ViewCellController, ViewCellController> { .init(name: "ViewCell", bundle: bundle, identifier: "ViewCell") }

    func validate() throws {
      if UIKit.UIImage(named: "iconLockNew", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconLockNew' is used in nib 'SettingCells', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icFavourite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icFavourite' is used in nib 'ViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icFavouriteSeleted", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icFavouriteSeleted' is used in nib 'ViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconMenuGroup", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconMenuGroup' is used in nib 'ViewCell', but couldn't be loaded.") }
    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `SettingCells`.
    var settingCells: RswiftResources.ReuseIdentifier<SettingCells> { .init(identifier: "SettingCells") }

    /// Reuse identifier `ViewCell`.
    var viewCell: RswiftResources.ReuseIdentifier<ViewCellController> { .init(identifier: "ViewCell") }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
      try self.main.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = HomeViewController

      let bundle: Foundation.Bundle

      let name = "Main"

      var favouriteViewController: RswiftResources.StoryboardViewControllerIdentifier<FavouriteViewController> { .init(identifier: "FavouriteViewController", storyboard: name, bundle: bundle) }
      var homeViewController: RswiftResources.StoryboardViewControllerIdentifier<HomeViewController> { .init(identifier: "HomeViewController", storyboard: name, bundle: bundle) }
      var scanViewController: RswiftResources.StoryboardViewControllerIdentifier<ScanViewController> { .init(identifier: "ScanViewController", storyboard: name, bundle: bundle) }
      var settingViewController: RswiftResources.StoryboardViewControllerIdentifier<SettingViewController> { .init(identifier: "SettingViewController", storyboard: name, bundle: bundle) }
      var show2DViewController: RswiftResources.StoryboardViewControllerIdentifier<Show2DViewController> { .init(identifier: "Show2DViewController", storyboard: name, bundle: bundle) }
      var show3DViewController: RswiftResources.StoryboardViewControllerIdentifier<Show3DViewController> { .init(identifier: "Show3DViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "move.3d") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'move.3d' is used in storyboard 'Main', but couldn't be loaded.") } }
        if favouriteViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'favouriteViewController' could not be loaded from storyboard 'Main' as 'FavouriteViewController'.") }
        if homeViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
        if scanViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'scanViewController' could not be loaded from storyboard 'Main' as 'ScanViewController'.") }
        if settingViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingViewController' could not be loaded from storyboard 'Main' as 'SettingViewController'.") }
        if show2DViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'show2DViewController' could not be loaded from storyboard 'Main' as 'Show2DViewController'.") }
        if show3DViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'show3DViewController' could not be loaded from storyboard 'Main' as 'Show3DViewController'.") }
      }
    }
  }
}